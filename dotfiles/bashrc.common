# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

#######
# ENV #
#######

# find NIXENV_HOME root folder
NIXENV_HOME=$(cd $(dirname "$BASH_SOURCE")/.. > /dev/null && pwd)

NIXENV_BINARIES=$NIXENV_HOME/bin/$( uname -sp | sed 's/ /\//' )

EDITOR=vim

export PATH=$PATH:$NIXENV_HOME/bin/cgi:$NIXENV_BINARIES

#########
# ALIAS #
#########

# places
alias cdme="cd ~/cernbox/me"
alias cdbe="cd ~/cernbox/be"

# git

alias ga="git add"
alias gc="git commit"
alias gs="git status"
alias gd="git diff"
alias gdt="git difftool --tool=vimdiff --no-prompt"

# ls

alias ls='ls -G'
alias ll="ls -GAl"
alias la='ls -A'
alias l='ls -CF'

# search / file explore

alias f='fzf --preview="cat {}"'
alias fv='vim $(f)'

# programs

alias m="make"

#########
# UTILS #
#########

function mdless {
    pandoc -t html $1 | lynx -stdin
}

function csview {
    # https://stackoverflow.com/questions/30981056/linux-shell-csv-viewer-tool-that-can-freeze-the-header
    vim -R -u NONE -N +'map <right> 2zl
                        map <left> 2zh
                        map q :qa<CR>
                        set nostartofline
                        se nu sbo=hor scb nowrap
                        1sp
                        winc w
                       ' <(sed -e "s/,,/, ,/g" $1|column -ts,) 
}

function rmk_upload {
    # uploads a file to an USB-connected reMarkable
    file="$1"
    curl --from "file=@\"$1\"" "http://10.11.99.1/upload"
}

####################
# CUSTOM MAN PAGES #
####################

CUSTOM_MAN_PAGES=$NIXENV_HOME/man/manpages
CUSTOM_MAN_PAGES_MD=$NIXENV_HOME/man/markdown
export MANPATH=$MANPATH:$CUSTOM_MAN_PAGES

function maned {

    markdown_file=$CUSTOM_MAN_PAGES_MD/$1.md
    man_file=$CUSTOM_MAN_PAGES/manl/$1.l

    vim $markdown_file

    # create man page unless file is empty -user cancelled creation of manpage-
    test -f $markdown_file && {
        # to-do: add a template with author / date / title
        pandoc -s -f markdown -t man $markdown_file > $man_file
        echo "generating $man_file"
    }
}

function manls {
    ls $CUSTOM_MAN_PAGES/manl/ | sed s/\.l$//
}

function manrm {
    test -f $CUSTOM_MAN_PAGES_MD/$1.md && {
        read -p "Do you want to remove man page '$1'? (y/N)"
        if [[ $REPLY = 'y' ]]; then
            rm $CUSTOM_MAN_PAGES_MD/$1.md
            rm $CUSTOM_MAN_PAGES/manl/$1.l
        fi
    }
}

###########
# HISTORY #
###########

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=1000000

##################
# USER INTERFACE #
##################

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

#Prompt
export PROMPT_COMMAND=__prompt_command
function __prompt_command() {
    local EXIT="$?"             # This needs to be first
    local returncode;

    local C_N='\[\e[0m\]'
    local C_Blue='\[\e[1;34m\]'
    local C_Red='\[\e[0;31m\]'
    local C_Cyan='\[\e[36m\]'

    if [ $EXIT != 0 ]; then
        returncode="${C_Red}=$EXIT${C_N} "      # Add red if exit code non 0
    fi

    PS1="\n[$returncode${C_Cyan}\u${C_N}@${C_Blue}\h ${C_N}\w]\n$ "
}

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


