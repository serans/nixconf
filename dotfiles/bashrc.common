# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

#######
# ENV #
#######

# find NIXENV_HOME root folder
export NIXENV_HOME=$(cd $(dirname "$BASH_SOURCE")/.. > /dev/null && pwd)
export DOTFILES=$NIXENV_HOME/dotfiles

# PATH
NIXENV_CGI=$NIXENV_HOME/bin/cgi/
NIXENV_BINARIES=$NIXENV_HOME/bin/$( uname -sp | sed 's/ /\//' )
export PATH=$PATH:$NIXENV_CGI:$NIXENV_BINARIES:$

# preferences
export EDITOR=vim
export TIME_STYLE=long-iso

#########
# ALIAS #
#########

# cern vm vnc tunnel
# - This allows connecting the VM vnc server from outside CERN
alias vnctunnel="ssh -f -L 5901:cwe-513-vol736.cern.ch:5901 lxplus7.cern.ch -N"

# git
alias ga="git add"
alias gc="git commit"
alias gs="git status"
alias gd="git diff"
alias gdt="git difftool --tool=vimdiff --no-prompt"

# ls
alias ls='ls -G --color=auto'
alias ll="ls -GAlh"
alias la='ls -A'
alias l='ls -CF'

# search / file explore
alias f='fzf --preview="cat {}"'
alias fv='vim $(f)'

# programs
alias m="make"

# Silly services
weather () { curl wttr.in/"$@"; }

dict() {
    echo -n "DEFINE gcide \"$@\"" | nc dict.org 2628 |
    grep -v -E '(220|150|250|^\.)' |
    sed -E $'s/^151.*/\\\n\\\n/g';
}

quoi(){
  echo "DEFINE fd-eng-fra \"$@\"" | \
  nc dict.org 2628 | \
  grep -v -E '(220|150|151|250|^\.)'
}

#########
# UTILS #
#########

function mdless {
    pandoc -t html $1 | lynx -stdin
}

function csview {
    # https://stackoverflow.com/questions/30981056/linux-shell-csv-viewer-tool-that-can-freeze-the-header
    vim -R -u NONE -N +'map <right> 2zl
                        map <left> 2zh
                        map q :qa<CR>
                        set nostartofline
                        se nu sbo=hor scb nowrap
                        1sp
                        winc w
                       ' <(sed -e "s/,,/, ,/g" $1|column -ts,) 
}

function rmk_upload {
    # uploads a file to an USB-connected reMarkable
    file="$1"
    curl --form "file=@\"$1\"" "http://10.11.99.1/upload"

}

####################
# CUSTOM MAN PAGES #
####################

CUSTOM_MAN_PAGES=$NIXENV_HOME/man/manpages
CUSTOM_MAN_PAGES_MD=$NIXENV_HOME/man/markdown
export MANPATH=$MANPATH:$CUSTOM_MAN_PAGES

function maned {

    markdown_file=$CUSTOM_MAN_PAGES_MD/$1.md
    man_file=$CUSTOM_MAN_PAGES/manl/$1.l

    vim $markdown_file

    # create man page unless file is empty -user cancelled creation of manpage-
    test -f $markdown_file && {
        # to-do: add a template with author / date / title
        pandoc -s -f markdown -t man $markdown_file > $man_file
        echo "generating $man_file"
    }
}

function manls {
    ls $CUSTOM_MAN_PAGES/manl/ | sed s/\.l$//
}

function manrm {
    test -f $CUSTOM_MAN_PAGES_MD/$1.md && {
        read -p "Do you want to remove man page '$1'? (y/N)"
        if [[ $REPLY = 'y' ]]; then
            rm $CUSTOM_MAN_PAGES_MD/$1.md
            rm $CUSTOM_MAN_PAGES/manl/$1.l
        fi
    }
}

###########
# HISTORY #
###########

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=1000000

##################
# USER INTERFACE #
##################

# Colors
C_End='\[\e[0m\]'
C_Blue='\[\e[1;34m\]'
C_Red='\[\e[0;31m\]'
C_Cyan='\[\e[36m\]'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize


#Prompt
function __prompt_command() {
    local ERRNO="$?"
    local error;

    if [ $ERRNO != 0 ]; then
        error="${C_Red}[${ERRNO}]${C_End}"
    fi

    PS1="\n${error}[\u@\h \w]\n$ "
    #PS1="\n[${error}${C_Cyan}\u${C_End}@${C_Blue}\h ${C_End}\w]\n$ "
}

export PROMPT_COMMAND=__prompt_command


# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


